{
  "version": 3,
  "file": "D:/Projects/MoaJs/moa.min.js",
  "sources": [
    "Moa.js"
  ],
  "names": [],
  "mappings
  "sourcesContent": [
    "\n/**\r\n * Created with WebStorm.\r\n * Project: MoaJs\r\n * User: Sergii Danilov\r\n * Date: 10/31/13\r\n * Time: 6:10 PM\r\n */\r\n/*global define:true, module:true*/\r\n/**\r\n Prototype inheritance and extensions in JavaScript\r\n @module Moa\r\n */\r\n(function () {\r\n    \"use strict\";\r\n    if (!Object.create) {\r\n        Object.create = (function () {\r\n            function F() {}\r\n            return function (o) {\r\n                if (arguments.length !== 1) {\r\n                    throw new Error('Object.create implementation only accepts one parameter.');\r\n                }\r\n                F.prototype = o;\r\n                return new F();\r\n            };\r\n        }());\r\n    }\r\n    var undef,\r\n        fn = 'function',\r\n        ob = 'object',\r\n        un = 'undefined',\r\n        $proto$ = (function () {\r\n            var obj, type = '$prototype$',\r\n                ctor = function () {};\r\n            ctor.prototype = {\r\n                getType: function () {\r\n                    return type;\r\n                }\r\n            };\r\n            ctor.prototype.constructor = ctor;\r\n            obj = new ctor();\r\n            obj.$ctor = ctor;\r\n            return {\r\n                $type: obj.getType(),\r\n                $basetype: undef,\r\n                $ctor: ctor,\r\n                $base: obj\r\n            };\r\n        }()),\r\n        map = {\r\n            '$prototype$': $proto$\r\n        },\r\n        extend = function (target, source) {\r\n            var prop;\r\n            for (prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        wrongParamsErr = function (method, param) {\r\n            var msg = 'Wrong parameters in ' + method;\r\n            if (param) {\r\n                msg = 'Wrong parameter ' + param + ' in ' + method;\r\n            }\r\n            return new Error(msg, 'Moa');\r\n        },\r\n        wrongType = function (extendType) {\r\n            return new Error('Type ' + extendType + ' not found', 'Moa');\r\n        },\r\n        build = function (type, base, definition) {\r\n            /*\r\n                $mixin string / [string]\r\n                $single: true / false\r\n            */\r\n            var basetype,\r\n                $ctor = definition.$ctor,\r\n                $base = {};\r\n            if ($ctor) {\r\n                delete definition.$ctor;\r\n            } else {\r\n                $ctor = function () {};\r\n            }\r\n            delete definition.$extend;\r\n            if (base) {\r\n                basetype = base.$basetype;\r\n                definition = extend(Object.create(base.$ctor.prototype), definition);\r\n            }\r\n            definition.getType = function () {\r\n                return type;\r\n            };\r\n            extend($base, definition);\r\n            $ctor.prototype = definition;\r\n            $ctor.prototype.constructor = $ctor;\r\n            $base.$ctor = $ctor;\r\n            return {\r\n                $type: type,\r\n                $basetype: basetype,\r\n                $ctor: $ctor,\r\n                $base: $base\r\n            };\r\n        },\r\n        /**\r\n         @class Moa\r\n        */\r\n        Moa = {\r\n            /**\r\n             * Define new or inherited type\r\n             * @method define\r\n             * @param type {string} name of object type\r\n             * @param definition {Object / Function} implementation of behavior for current type of object. If it is null - delete declared object\r\n             * @return {function} constructor of defined object type\r\n             */\r\n            define: function (type, definition) {\r\n                var mapObj, baseType, base,\r\n                    len = arguments.length;\r\n                switch (len) {\r\n                case 1:\r\n                    mapObj = map[type];\r\n                    if (!mapObj) {\r\n                        throw wrongType(type);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    switch (typeof definition) {\r\n                    case fn:\r\n                        baseType = definition().$extend;\r\n                        if (!baseType) {\r\n                            baseType = '$prototype$';\r\n                        }\r\n                        base = map[baseType];\r\n                        if (!base) {\r\n                            throw wrongType(baseType);\r\n                        }\r\n                        mapObj = build(type, base, definition(base.$base));\r\n                        map[type] = mapObj;\r\n                        break;\r\n                    case ob:\r\n                        if (definition !== null) {\r\n                            baseType = definition.$extend;\r\n                            if (!baseType) {\r\n                                baseType = '$prototype$';\r\n                            }\r\n                            base = map[baseType];\r\n                            if (!base) {\r\n                                throw wrongType(baseType);\r\n                            }\r\n                            mapObj = build(type, base, definition);\r\n                            map[type] = mapObj;\r\n                        } else {\r\n                            delete map[type];\r\n                            return undef;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw wrongParamsErr('define', 'definition');\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw wrongParamsErr('define');\r\n                }\r\n                return mapObj.$ctor;\r\n            }\r\n        };\r\n    // Return as AMD module or attach to head object\r\n    if (typeof define !== un) {\r\n        define('Moa',[], function () { return Moa; });\r\n    } else if (typeof window !== un) {\r\n        window.Moa = Moa;\r\n    } else {\r\n        module.exports = Moa;\r\n    }\r\n}());"
  ]
}